# -*- coding: utf-8 -*-
"""2431483_Bibek_karki.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zgWd5og_6TTYIz04RbrbApioTjpfuEBL

3.1 Problem - 1: Getting Started with Data Exploration - Some Warm up
Exercises:

1. Data Exploration and Understanding:

• Dataset Overview:

1. Load the dataset and display the first 10 rows.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # importing csv file from drive.
df = pd.read_csv(file_path)

# Display the first 10 rows.
print(df.head(10))

"""2. Identify the number of rows and columns in the dataset.

"""

# Identifying the number of rows and columns in dataset.
rows, columns = df.shape

print(f"The dataset has {rows} rows and {columns} columns.")

"""3. List all the columns and their data types."""

# listing all the columns and their data types
print("Columns and their data types:")
print(df.dtypes)

"""• Basic Statistics:

1. Calculate the mean, median, and standard deviation for the Score column.
"""

# Calculate the mean, median, and standard deviation for the 'score' column
mean_score = df['score'].mean()
median_score = df['score'].median()
std_dev_score = df['score'].std()

# Display the results
print(f"Mean of Score: {mean_score}")
print(f"Median of Score: {median_score}")
print(f"Standard Deviation of Score: {std_dev_score}")

"""2. Identify the country with the highest and lowest happiness scores."""

# Identify the country with the highest and lowest happiness scores
highest_score_country = df.loc[df['score'].idxmax()]['Country name']
lowest_score_country = df.loc[df['score'].idxmin()]['Country name']
highest_score = df['score'].max()
lowest_score = df['score'].min()

# Display the results
print(f"Country with the highest happiness score: {highest_score_country} (Score: {highest_score})")
print(f"Country with the lowest happiness score: {lowest_score_country} (Score: {lowest_score})")

"""• Missing Values:

1. Check if there are any missing values in the dataset. If so, display the total count for each column.
"""

# Check for missing values in each column
null_values = data_frame.isnull().sum()
print(null_values)

"""• Filtering and Sorting:

1. Filter the dataset to show only the countries with a Score greater than 7.5.
"""

filtered_score = data_frame[data_frame['score']>=7.5]
filtered_score

"""2. For the filtered dataset - Sort the dataset by GDP per Capita in descending order and display the
top 10 rows.
"""

filtered_score = data_frame[data_frame['score']>=7.5]
sorted_gdp = filtered_score.sort_values('Log GDP per capita', ascending=False)
top_10_countries = sorted_gdp.head()
top_10_countries

"""• Adding New Columns:
1. Create a new column called Happiness Category that categorizes countries into three categories
based on their Score:

Low − (Score < 4)
Medium − (4 ≤ Score ≤ 6)
High − (Score > 6)
"""

def category(score):
    if score <4:
        return 'Low'
    elif score <=6:
        return 'Medium'
    else:
        return 'High'

data_frame['Happiness_Category']=data_frame['score'].apply(category)
count = data_frame['Happiness_Category'].value_counts()
count

"""2. Data Visualizations:

• Bar Plot: Plot the top 10 happiest countries by Score using a bar chart.
"""

import pandas as pd
import matplotlib.pyplot as plt
reader = pd.read_csv("/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv")
data_frame = pd.DataFrame(reader)
score_10 = data_frame.sort_values('score', ascending= False)
top_10 = score_10.head(10)
plt.figure(figsize=(10,6))
plt.xlabel('Country Name')
plt.ylabel('Score')
plt.bar(top_10['Country name'],top_10['score'],color ='skyblue')
plt.title("Happiness Country")
plt.tight_layout()
plt.show()

"""• Line Plot: Plot the top 10 unhappiest countries by Score using a Line chart."""

top_10_unhappiest = data_frame.sort_values('score',ascending=True)
top_10 = top_10_unhappiest.head(10)
plt.figure(figsize=(10,6))
plt.xlabel('Country Name')
plt.ylabel('Score')
plt.plot(top_10['Country name'],top_10['score'],color ='red',ls=':')
plt.title("Happiness Country")
plt.tight_layout()
plt.show()

"""• Plot a histogram for the Score column to show its distribution and also interpret."""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
reader = pd.read_csv("/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv")
data_frame = pd.DataFrame(reader)
plt.figure(figsize=(10, 6))
plt.hist(data_frame['score'] ,bins=10, color='skyblue', edgecolor='red')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram Example')
plt.tight_layout()
plt.show()

"""• Scatter Plot: Plot a scatter plot between GDP per Capita and Score to visualize their relationship."""

import pandas as pd
import matplotlib.pyplot as plt
reader = pd.read_csv("/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv")
data_frame = pd.DataFrame(reader)

# Check the exact column names from data.columns
x_col = 'Log GDP per capita'  # Replace with the exact column name if different
y_col = 'score'  # Replace with the exact column name if different

# Scatter Plot
plt.figure(figsize=(10, 6))
plt.scatter(data[x_col], data[y_col], color='blue', alpha=0.6)

# Add labels and title
plt.xlabel(x_col)
plt.ylabel(y_col)
plt.title('Scatter Plot of GDP per Capita vs Score')

# Display the plot
plt.grid(True)  # Optional: Add gridlines for clarity
plt.show()

"""3.2 Problem - 2 - Some Advance Data Exploration Task:

Task - 1 - Setup Task - Preparing the South-Asia Dataset:

Steps:
1. Define the countries in South Asia with a list for example:
south asian countries = ["Afghanistan", "Bangladesh", "Bhutan", "India",

"Maldives", "Nepal", "Pakistan", "Srilanka"]
"""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'
data = pd.read_csv(file_path)

# Define the list of South Asian countries
south_asian_countries = ["Afghanistan", "Bangladesh", "Bhutan", "India",
                         "Maldives", "Nepal", "Pakistan", "Sri Lanka"]

# Filter the dataset for South Asian countries
south_asia_data = data[data['Country name'].isin(south_asian_countries)]

# Display the filtered dataset
print(south_asia_data)

"""2. Use the list from step - 1 to filtered the dataset {i.e. filtered out matching dataset from list.}"""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'
data = pd.read_csv(file_path)

# Define the list of South Asian countries
south_asian_countries = ["Afghanistan", "Bangladesh", "Bhutan", "India",
                         "Maldives", "Nepal", "Pakistan", "Sri Lanka"]

# Filter the dataset for South Asian countries
filtered_data = data[data['Country name'].isin(south_asian_countries)]

# Display the filtered dataset
print(filtered_data)

"""3. Save the filtered dataframe as separate CSV files for future use."""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'
data = pd.read_csv(file_path)

# Define the list of South Asian countries
south_asian_countries = ["Afghanistan", "Bangladesh", "Bhutan", "India",
                         "Maldives", "Nepal", "Pakistan", "Sri Lanka"]

# Filter the dataset for South Asian countries
filtered_data = data[data['Country name'].isin(south_asian_countries)]

# Save the filtered dataset as a new CSV file
output_path = '/content/drive/MyDrive/ASSESMENT 1/south_asia_data.xlsx'
filtered_data.to_csv(output_path, index=False)

# Confirm the file is saved
print(f"Filtered dataset saved successfully to {output_path}")

"""Task - 2 - Composite Score Ranking:

Tasks:

1. Using the SouthAsia DataFrame, create a new column called Composite Score that combines the
following metrics:

Composite Score = 0.40 × GDP per Capita + 0.30 × Social Support

+ 0.30 × Healthy Life Expectancy
"""

# Create a new column 'Composite Score' using the given formula
filtered_data['Composite Score'] = (
    0.40 * filtered_data['Log GDP per capita'] +
    0.30 * filtered_data['Social support'] +
    0.30 * filtered_data['Healthy life expectancy']
)

# Display the updated DataFrame
print(filtered_data[['Country name', 'Composite Score']])

"""2. Rank the South Asian countries based on the Composite Score in descending order."""

south_asia_data['Composite Score'] = (
    0.40 * south_asia_data['Log GDP per capita'] +
    0.30 * south_asia_data['Social support'] +
    0.30 * south_asia_data['Healthy life expectancy']
)
south_asia_data_sorted = south_asia_data.sort_values(by='Composite Score', ascending=False)
print(south_asia_data_sorted[['Country name', 'Composite Score']])

"""3. Visualize the top 5 countries using a horizontal bar chart showing the Composite Score."""

import matplotlib.pyplot as plt

# Sort the data to get top 5 countries
top_5_countries = south_asia_data.sort_values(by='Composite Score', ascending=False).head(5)

# Create a horizontal bar chart
plt.figure(figsize=(10, 6))
plt.barh(top_5_countries['Country name'], top_5_countries['Composite Score'], color='skyblue')
plt.xlabel('Composite Score')
plt.ylabel('Country')
plt.title('Top 5 South Asian Countries by Composite Score')
plt.gca().invert_yaxis()  # Invert y-axis to have the top country at the top
plt.show()

"""4. Discuss whether the rankings based on the Composite Score align with the original Score - support your
discussion with some visualization plot.
"""

import matplotlib.pyplot as plt

# Rank the data based on Composite Score and original Score
south_asia_data_sorted_composite = south_asia_data.sort_values(by='Composite Score', ascending=False)
south_asia_data_sorted_score = south_asia_data.sort_values(by='score', ascending=False)

# Create a scatter plot to compare the rankings based on Composite Score vs. original Score
plt.figure(figsize=(8, 6))
plt.scatter(south_asia_data_sorted_composite['Composite Score'], south_asia_data_sorted_score['score'], color='orange')

# Add labels and title to the plot
plt.xlabel('Composite Score')
plt.ylabel('Original Score')
plt.title('Comparison of Rankings: Composite Score vs Original Score')
plt.grid(True)

# Show the plot
plt.show()

"""Task - 3 - Outlier Detection:

Tasks:

1. Identify outlier countries in South Asia based on their Score and GDP per Capita.
"""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with the actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][['Country name', 'score', 'Log GDP per capita']]

# Function to detect outliers using the 1.5 x IQR rule
def detect_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] < lower_bound) | (df[column] > upper_bound)]

# Detect outliers
score_outliers = detect_outliers(south_asia_data, 'score')
gdp_outliers = detect_outliers(south_asia_data, 'Log GDP per capita')

# Combine outliers from both columns
combined_outliers = pd.concat([score_outliers, gdp_outliers]).drop_duplicates()

# Display outliers
print("Outlier countries based on Score and GDP per Capita:")
print(combined_outliers)

"""2. Define outliers using the 1.5 × IQR rule."""

# Function to detect outliers using 1.5 × IQR rule
def detect_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]
    return outliers, lower_bound, upper_bound

# Example Usage
score_outliers, score_lower, score_upper = detect_outliers(south_asia_data, 'score')
gdp_outliers, gdp_lower, gdp_upper = detect_outliers(south_asia_data, 'Log GDP per capita')

print(f'Score Outlier Bounds: {score_lower:.2f}, {score_upper:.2f}')
print(f'GDP Outlier Bounds: {gdp_lower:.2f}, {gdp_upper:.2f}')

"""3. Create a scatter plot with GDP per Capita on the x-axis and Score on the y-axis, highlighting outliers
in a different color.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][['Country name', 'score', 'Log GDP per capita']]

# Function to detect outliers using 1.5 × IQR rule
def detect_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] < lower_bound) | (df[column] > upper_bound)]

# Identify outliers
score_outliers = detect_outliers(south_asia_data, 'score')
gdp_outliers = detect_outliers(south_asia_data, 'Log GDP per capita')
combined_outliers = pd.concat([score_outliers, gdp_outliers]).drop_duplicates()

# Create scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(south_asia_data['Log GDP per capita'], south_asia_data['score'], color='blue', label='South Asian Countries')

# Highlight outliers in red
plt.scatter(combined_outliers['Log GDP per capita'], combined_outliers['score'], color='red', label='Outlier', s=150)

# Annotate country names
for _, row in south_asia_data.iterrows():
    plt.text(row['Log GDP per capita'] + 0.01, row['score'], row['Country name'], fontsize=9)

# Customize plot
plt.title('GDP per Capita vs. Score in South Asia')
plt.xlabel('Log GDP per Capita')
plt.ylabel('Score')
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.show()

"""4. Discuss the characteristics of these outliers and their potential impact on regional averages.

Afghanistan is an outlier under the 1.5 × IQR rule, having scored in happiness at 1.721 and in Log GDP per Capita at 0.628. The most major reasons are related to poor governance, war, unstable politics, bad healthcare systems, and lower education attainment. These, in turn, pull down the regional averages for South Asia and give a skewed view of the overall well-being and prosperity of the region. The implication of these false images means specific approaches to policy, since any general approaches that ignore Afghan particularities must lead in the way in retarding successful development works.

Task - 4 - Exploring Trends Across Metrics:

Tasks:
"""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with the actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][[
    'Country name', 'score', 'Freedom to make life choices', 'Generosity'
]]

# Calculate Pearson correlation
correlations = south_asia_data[['score', 'Freedom to make life choices', 'Generosity']].corr(method='pearson')

# Display correlation results
print("Pearson Correlation with Score:")
print(correlations['score'][1:])

"""2. Create scatter plots with trendlines for these metrics against the Score."""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with the actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][[
    'Country name', 'score', 'Freedom to make life choices', 'Generosity'
]]

# Function to plot scatter with trendline
def plot_trendline(x, y, xlabel, ylabel, title):
    plt.figure(figsize=(8, 6))
    plt.scatter(x, y, color='blue', label='Data Points')

    # Fit a linear trendline
    m, b = np.polyfit(x, y, 1)
    plt.plot(x, m * x + b, color='red', linestyle='--', label='Trendline')

    # Customize plot
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    plt.show()

# Plot scatter with trendlines
plot_trendline(
    south_asia_data['Freedom to make life choices'],
    south_asia_data['score'],
    'Freedom to Make Life Choices',
    'Score',
    'Freedom to Make Life Choices vs. Score'
)

plot_trendline(
    south_asia_data['Generosity'],
    south_asia_data['score'],
    'Generosity',
    'Score',
    'Generosity vs. Score'
)

"""3. Identify and discuss the strongest and weakest relationships between these metrics and the Score for
South Asian countries.
"""

# Calculate Pearson correlation
correlations = south_asia_data[['score', 'Freedom to make life choices', 'Generosity']].corr(method='pearson')

# Extract relevant correlations
freedom_corr = correlations.loc['score', 'Freedom to make life choices']
generosity_corr = correlations.loc['score', 'Generosity']

# Print results
print(f"Pearson Correlation with Score:")
print(f"Freedom to Make Life Choices: {freedom_corr:.2f}")
print(f"Generosity: {generosity_corr:.2f}")

"""Task - 5 - Gap Analysis:

Tasks:

1. Add a new column, GDP-Score Gap, which is the difference between GDP per Capita and the Score
for each South Asian country.
"""

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with the actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][[
    'Country name', 'score', 'Log GDP per capita'
]]

# Add new column 'GDP-Score Gap'
south_asia_data['GDP-Score Gap'] = south_asia_data['Log GDP per capita'] - south_asia_data['score']

# Display the updated DataFrame
print(south_asia_data)

"""2. Rank the South Asian countries by this gap in both ascending and descending order."""

# Rank countries by 'GDP-Score Gap' in ascending order
ascending_rank = south_asia_data.sort_values('GDP-Score Gap', ascending=True)
print("Ranking by GDP-Score Gap (Ascending):")
print(ascending_rank)

# Rank countries by 'GDP-Score Gap' in descending order
descending_rank = south_asia_data.sort_values('GDP-Score Gap', ascending=False)
print("\nRanking by GDP-Score Gap (Descending):")
print(descending_rank)

"""3. Highlight the top 3 countries with the largest positive and negative gaps using a bar chart."""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with actual file path
data = pd.read_csv(file_path)

# Filter South Asian countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]
south_asia_data = data[data['Country name'].isin(south_asian_countries)][[
    'Country name', 'score', 'Log GDP per capita'
]]

# Add 'GDP-Score Gap'
south_asia_data['GDP-Score Gap'] = south_asia_data['Log GDP per capita'] - south_asia_data['score']

# Get top 3 positive and negative gaps
largest_positive = south_asia_data.nlargest(3, 'GDP-Score Gap')
largest_negative = south_asia_data.nsmallest(3, 'GDP-Score Gap')

# Combine results for plotting
combined_gaps = pd.concat([largest_positive, largest_negative])

# Create bar chart
plt.figure(figsize=(10, 6))
colors = ['green' if x > 0 else 'red' for x in combined_gaps['GDP-Score Gap']]
plt.bar(combined_gaps['Country name'], combined_gaps['GDP-Score Gap'], color=colors)

# Customize the chart
plt.title('Top 3 Largest Positive and Negative GDP-Score Gaps')
plt.xlabel('Country')
plt.ylabel('GDP-Score Gap')
plt.axhline(0, color='black', linestyle='--', linewidth=1)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""GDP-Score Gap Shows Disparities Between Economic Wealth and Happiness Levels in South Asia, Implications for Development Strategies.

Positive Gaps (e.g., Maldives, Sri Lanka, India) result from economic prosperity overshadowed by social challenges like inequality, political instability, and lack of societal satisfaction. These gaps will be filled with policies dedicated to social welfare, mental health improvement, and governance. Unlike negative gaps of countries – as for example Bhutan, Nepal, and Bangladesh – strong social binding and high prestige of culture, in which the happiness is much more valuable than can be determined by existing economic indicators that allows to read the well being of these countries despite limitations of GDP measurements.

Overall, South Asian countries requires integrated growth which should be a mix of both growth in economy as well as social indicators like equality, governance and public services.

3.3 Problem - 3 - Comparative Analysis:

Task - 1 - Setup Task - Preparing the Middle Eastern Dataset:

Tasks:

1. Similar in Task - 1 of Problem 2 create a dataframe from middle eastern countries. For hint use the
following list:
middle east countries = [ "Bahrain", "Iran", "Iraq", "Israel", "Jordan",
"Kuwait", "Lebanon", "Oman", "Palestine", "Qatar", "Saudi Arabia", "Syria",

"United Arab Emirates", "Yemen"]
"""

# Define the list of Middle Eastern countries
middle_east_countries = [
    "Bahrain", "Iran", "Iraq", "Israel", "Jordan",
    "Kuwait", "Lebanon", "Oman", "Palestine", "Qatar",
    "Saudi Arabia", "Syria", "United Arab Emirates", "Yemen"
]

# Filter the dataset for Middle Eastern countries
middle_east_data = data[data['Country name'].isin(middle_east_countries)]

# Display the filtered DataFrame
print(middle_east_data)

"""Complete the following task:

1. Descriptive Statistics:

• Calculate the mean, Standard deviation of the score for both South Asia and Middle East.
"""

# Calculate mean and standard deviation for South Asia
south_asia_mean = south_asia_data['score'].mean()
south_asia_std = south_asia_data['score'].std()

# Calculate mean and standard deviation for Middle East
middle_east_mean = middle_east_data['score'].mean()
middle_east_std = middle_east_data['score'].std()

# Display the results
print(f"South Asia - Mean: {south_asia_mean}, Standard Deviation: {south_asia_std}")
print(f"Middle East - Mean: {middle_east_mean}, Standard Deviation: {middle_east_std}")

"""• Which region has higher happiness Scores on average?"""

# Compare the mean scores of both regions
if south_asia_mean > middle_east_mean:
    print(f"South Asia has a higher average happiness score: {south_asia_mean} vs {middle_east_mean}")
else:
    print(f"Middle East has a higher average happiness score: {middle_east_mean} vs {south_asia_mean}")

"""2. Top and Bottom Performers:

• Identify the top 3 and bottom 3 countries in each region based on the score.
"""

# Top 3 and bottom 3 countries in South Asia based on score
south_asia_top_3 = south_asia_data.sort_values(by='score', ascending=False).head(3)
south_asia_bottom_3 = south_asia_data.sort_values(by='score', ascending=True).head(3)

# Top 3 and bottom 3 countries in Middle East based on score
middle_east_top_3 = middle_east_data.sort_values(by='score', ascending=False).head(3)
middle_east_bottom_3 = middle_east_data.sort_values(by='score', ascending=True).head(3)

# Display the results
print("South Asia - Top 3 Countries:")
print(south_asia_top_3[['Country name', 'score']])
print("\nSouth Asia - Bottom 3 Countries:")
print(south_asia_bottom_3[['Country name', 'score']])

print("\nMiddle East - Top 3 Countries:")
print(middle_east_top_3[['Country name', 'score']])
print("\nMiddle East - Bottom 3 Countries:")
print(middle_east_bottom_3[['Country name', 'score']])

"""• Plot bar charts comparing these charts."""

import matplotlib.pyplot as plt

# Plot for South Asia - Top 3 and Bottom 3 Countries
fig, ax = plt.subplots(2, 1, figsize=(12, 12))

# South Asia - Top 3
ax[0].barh(south_asia_top_3['Country name'], south_asia_top_3['score'], color='skyblue')
ax[0].set_xlabel('Happiness Score')
ax[0].set_title('Top 3 South Asian Countries by Happiness Score')

# South Asia - Bottom 3
ax[1].barh(south_asia_bottom_3['Country name'], south_asia_bottom_3['score'], color='salmon')
ax[1].set_xlabel('Happiness Score')
ax[1].set_title('Bottom 3 South Asian Countries by Happiness Score')

plt.tight_layout()
plt.show()

# Plot for Middle East - Top 3 and Bottom 3 Countries
fig, ax = plt.subplots(2, 1, figsize=(12, 12))

# Middle East - Top 3
ax[0].barh(middle_east_top_3['Country name'], middle_east_top_3['score'], color='skyblue')
ax[0].set_xlabel('Happiness Score')
ax[0].set_title('Top 3 Middle Eastern Countries by Happiness Score')

# Middle East - Bottom 3
ax[1].barh(middle_east_bottom_3['Country name'], middle_east_bottom_3['score'], color='salmon')
ax[1].set_xlabel('Happiness Score')
ax[1].set_title('Bottom 3 Middle Eastern Countries by Happiness Score')

plt.tight_layout()
plt.show()

"""3. Metric Comparisons:

• Compare key metrics like GDP per Capita, Social Support, and Healthy Life Expectancy
between the regions using grouped bar charts.
"""

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
file_path = '/content/drive/MyDrive/ASSESMENT 1/WHR-2024-5CS037 (1).csv'  # Replace with the actual file path
data = pd.read_csv(file_path)

# Fix column names (remove extra spaces)
data.columns = data.columns.str.strip()

# Filter South Asian and Middle Eastern countries
south_asian_countries = [
    'Afghanistan', 'Bangladesh', 'Bhutan', 'India',
    'Maldives', 'Nepal', 'Pakistan', 'Sri Lanka'
]

middle_east_countries = [
    'Bahrain', 'Iran', 'Iraq', 'Israel', 'Jordan',
    'Kuwait', 'Lebanon', 'Oman', 'Qatar', 'Saudi Arabia',
    'Syria', 'United Arab Emirates', 'Yemen'
]

# Create subsets for both regions
south_asia_data = data[data['Country name'].isin(south_asian_countries)]
middle_east_data = data[data['Country name'].isin(middle_east_countries)]

# Calculate mean metrics for both regions
south_asia_metrics = [
    south_asia_data['Log GDP per capita'].mean(),
    south_asia_data['Social support'].mean(),
    south_asia_data['Healthy life expectancy'].mean()
]

middle_east_metrics = [
    middle_east_data['Log GDP per capita'].mean(),
    middle_east_data['Social support'].mean(),
    middle_east_data['Healthy life expectancy'].mean()
]

# Labels for the metrics
metrics = ['GDP per Capita', 'Social Support', 'Healthy Life Expectancy']

# Set up positions for bars
x = np.arange(len(metrics))  # The label locations
width = 0.35  # The width of the bars

# Create a grouped bar chart
fig, ax = plt.subplots(figsize=(10, 6))

bar1 = ax.bar(x - width/2, south_asia_metrics, width, label='South Asia', color='skyblue')
bar2 = ax.bar(x + width/2, middle_east_metrics, width, label='Middle East', color='salmon')

# Add labels, title, and custom x-axis tick labels
ax.set_xlabel('Metrics')
ax.set_ylabel('Mean Values')
ax.set_title('Comparison of Key Metrics between South Asia and Middle East')
ax.set_xticks(x)
ax.set_xticklabels(metrics)
ax.legend()

# Annotate the bars
def annotate_bars(bars):
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{height:.2f}',
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # Offset for text
                    textcoords="offset points",
                    ha='center', va='bottom')

annotate_bars(bar1)
annotate_bars(bar2)

# Show the plot
plt.tight_layout()
plt.show()

"""• Which metrics show the largest disparity between the two regions?"""

# Calculate metric differences
metric_differences = np.abs(np.array(middle_east_metrics) - np.array(south_asia_metrics))

# Create a DataFrame for easier display
disparity_df = pd.DataFrame({
    'Metric': metrics,
    'South Asia': south_asia_metrics,
    'Middle East': middle_east_metrics,
    'Difference': metric_differences
})

# Find the largest disparity
largest_disparity = disparity_df.loc[disparity_df['Difference'].idxmax()]

# Display the results
print("Metric Disparities between South Asia and the Middle East:")
print(disparity_df)
print("\nMetric with the Largest Disparity:")
print(largest_disparity)

"""4. Happiness Disparity:

• Compute the range (max - min) and coefficient of variation (CV) for Score in both regions.
"""

# Calculate range and CV for South Asia
south_asia_score_max = south_asia_data['score'].max()
south_asia_score_min = south_asia_data['score'].min()
south_asia_range = south_asia_score_max - south_asia_score_min
south_asia_cv = south_asia_data['score'].std() / south_asia_data['score'].mean() * 100

# Calculate range and CV for Middle East
middle_east_score_max = middle_east_data['score'].max()
middle_east_score_min = middle_east_data['score'].min()
middle_east_range = middle_east_score_max - middle_east_score_min
middle_east_cv = middle_east_data['score'].std() / middle_east_data['score'].mean() * 100

# Create a DataFrame for display
happiness_disparity_df = pd.DataFrame({
    'Region': ['South Asia', 'Middle East'],
    'Max Score': [south_asia_score_max, middle_east_score_max],
    'Min Score': [south_asia_score_min, middle_east_score_min],
    'Range (Max - Min)': [south_asia_range, middle_east_range],
    'Coefficient of Variation (CV %)': [south_asia_cv, middle_east_cv]
})

# Display the results
print("Happiness Disparity (Range & CV) between South Asia and the Middle East:")
print(happiness_disparity_df)

"""• Which region has greater variability in happiness?"""

# Determine the region with greater variability
if south_asia_cv > middle_east_cv:
    greater_variability_region = "South Asia"
else:
    greater_variability_region = "Middle East"

# Print the result
print(f"The region with greater variability in happiness is: {greater_variability_region}")

"""5. Correlation Analysis:

• Analyze the correlation of Score with other metrics Freedom to Make Life Choices, and
Generosity within each region.
"""

# Calculate correlations for South Asia
south_asia_corr_freedom = south_asia_data[['score', 'Freedom to make life choices']].corr().iloc[0, 1]
south_asia_corr_generosity = south_asia_data[['score', 'Generosity']].corr().iloc[0, 1]

# Calculate correlations for Middle East
middle_east_corr_freedom = middle_east_data[['score', 'Freedom to make life choices']].corr().iloc[0, 1]
middle_east_corr_generosity = middle_east_data[['score', 'Generosity']].corr().iloc[0, 1]

# Create a DataFrame to display results
correlation_df = pd.DataFrame({
    'Metric': ['Freedom to Make Life Choices', 'Generosity'],
    'South Asia Correlation': [south_asia_corr_freedom, south_asia_corr_generosity],
    'Middle East Correlation': [middle_east_corr_freedom, middle_east_corr_generosity]
})

# Display results
print("Correlation of Score with Key Metrics in South Asia and Middle East:")
print(correlation_df)

"""• Create scatter plots to visualize and interpret the relationships."""

import seaborn as sns
import matplotlib.pyplot as plt

# Create scatter plots with trendlines
fig, axes = plt.subplots(2, 2, figsize=(14, 10))
fig.suptitle("Relationships Between Score and Key Metrics", fontsize=16)

# South Asia: Score vs. Freedom to Make Life Choices
sns.regplot(
    ax=axes[0, 0],
    x='Freedom to make life choices',
    y='score',
    data=south_asia_data,
    color='skyblue'
)
axes[0, 0].set_title("South Asia: Freedom vs Score")

# South Asia: Score vs. Generosity
sns.regplot(
    ax=axes[0, 1],
    x='Generosity',
    y='score',
    data=south_asia_data,
    color='lightgreen'
)
axes[0, 1].set_title("South Asia: Generosity vs Score")

# Middle East: Score vs. Freedom to Make Life Choices
sns.regplot(
    ax=axes[1, 0],
    x='Freedom to make life choices',
    y='score',
    data=middle_east_data,
    color='salmon'
)
axes[1, 0].set_title("Middle East: Freedom vs Score")

# Middle East: Score vs. Generosity
sns.regplot(
    ax=axes[1, 1],
    x='Generosity',
    y='score',
    data=middle_east_data,
    color='orange'
)
axes[1, 1].set_title("Middle East: Generosity vs Score")

# Customize plots
for ax in axes.flat:
    ax.set_xlabel("Metric Value")
    ax.set_ylabel("Happiness Score")
    ax.grid(True, linestyle='--', alpha=0.6)

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

"""6. Outlier Detection:

• Identify outlier countries in both regions based on Score and GDP per Capita.
"""

# Define a function to identify outliers using the 1.5 x IQR rule
def identify_outliers(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data[column] < lower_bound) | (data[column] > upper_bound)]
    return outliers

# Identify outliers for Score and GDP per Capita
south_asia_outliers_score = identify_outliers(south_asia_data, 'score')
south_asia_outliers_gdp = identify_outliers(south_asia_data, 'Log GDP per capita')

middle_east_outliers_score = identify_outliers(middle_east_data, 'score')
middle_east_outliers_gdp = identify_outliers(middle_east_data, 'Log GDP per capita')

# Combine outlier results into DataFrames
south_asia_outliers = pd.concat([south_asia_outliers_score, south_asia_outliers_gdp]).drop_duplicates()
middle_east_outliers = pd.concat([middle_east_outliers_score, middle_east_outliers_gdp]).drop_duplicates()

# Display results
print("South Asia Outliers (Score & GDP per Capita):")
print(south_asia_outliers[['Country name', 'score', 'Log GDP per capita']])

print("\nMiddle East Outliers (Score & GDP per Capita):")
print(middle_east_outliers[['Country name', 'score', 'Log GDP per capita']])

"""• Plot these outliers and discuss their implications."""

import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot for South Asia and Middle East
fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# South Asia Scatter Plot
sns.scatterplot(
    ax=ax[0],
    data=south_asia_data,
    x='Log GDP per capita',
    y='score',
    hue=south_asia_data['Country name'].isin(south_asia_outliers['Country name']),
    palette={True: 'red', False: 'skyblue'},
    legend=False
)
ax[0].set_title("South Asia: Score and GDP per Capita (Log)")
ax[0].set_xlabel("Log GDP per Capita")
ax[0].set_ylabel("Score")
ax[0].grid(True, linestyle='--', alpha=0.6)

# Middle East Scatter Plot
sns.scatterplot(
    ax=ax[1],
    data=middle_east_data,
    x='Log GDP per capita',
    y='score',
    hue=middle_east_data['Country name'].isin(middle_east_outliers['Country name']),
    palette={True: 'red', False: 'salmon'},
    legend=False
)
ax[1].set_title("Middle East: Score and GDP per Capita (Log)")
ax[1].set_xlabel("Log GDP per Capita")
ax[1].set_ylabel("Score")
ax[1].grid(True, linestyle='--', alpha=0.6)

plt.tight_layout()
plt.show()

"""Economic Disparities: A high GDP but low levels of happiness indicate that riches does not always translate into well-being (e.g., oil-rich nations with limited freedoms or inequality).
Social Imbalances: Despite poverty, a low GDP and high levels of happiness are indicative of strong cultural bonds and social support.
Implications for Policy: Look for successful policies in countries above the trendline; countries below the trendline might require economic or quality-of-life improvements.
Regional Trends: The Middle East emphasizes governance and freedom difficulties with high-GDP, low-happiness outliers, while South Asia displays low-GDP, high-happiness due to cultural strengths.

7. Visualization:

• Create boxplots comparing the distribution of Score between South Asia and the Middle East.
"""

import seaborn as sns
import matplotlib.pyplot as plt

# Combine data for plotting
combined_data = pd.concat([
    south_asia_data[['Country name', 'score']].assign(Region='South Asia'),
    middle_east_data[['Country name', 'score']].assign(Region='Middle East')
])

# Create boxplots
plt.figure(figsize=(10, 6))
sns.boxplot(data=combined_data, x='Region', y='score', palette=['skyblue', 'salmon'])

# Customize the plot
plt.title("Comparison of Score Distribution between South Asia and the Middle East")
plt.xlabel("Region")
plt.ylabel("Score")
plt.grid(True, linestyle='--', alpha=0.6)
plt.show()

"""• Interpret the key differences in distribution shapes, medians, and outliers.

Boxplot comparison of South Asia and Middle-East scores shows differences in score distributions. South Asia’s larger box or longer bottom whisker indicates a more skewed or dispersed distribution, reflecting regional challenges such social and economic pain. Asymmetry focuses on divergences between countries, but the smaller and perhaps symmetric box for the Middle East shows a more compressed distribution of scores. The Middle East’s higher median means that they have even higher average scores thanks to their oil wealth, despite their own substandard social or political issues, while South Asia, with its much lower median, brings out a generally lower scoring happiness—likely due in part to poverty, political instability, and infrastructure failings. In South Asia, outliers often take form of extremes, with high achievers clustered in governance while low achievers (selectively, of course) are held back by internal conflict or bad governance. or social help, similar to Bhutan. High outliers in the Middle East tend to be wealthy countries like the United Arab Emirates; low outliers are those, like Yemen, that are sanctioned or riven by conflict. The Middle East has a higher median (with extreme outliers), suggesting an economic inequality, often rooted in oil wealth, that is typical of the region, while the larger variability of South Asia (as a whole) indicates a greater diversity of approaches to levels of development and governance.
"""